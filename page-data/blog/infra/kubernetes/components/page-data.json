{"componentChunkName":"component---src-templates-blog-post-template-tsx","path":"/blog/infra/kubernetes/components/","result":{"data":{"site":{"siteMetadata":{"title":"Azuma Blog"}},"markdownRemark":{"id":"63b9ea9f-34d1-50c4-bccd-3f04266f6fe7","excerpt":"個人で勉強するため, Kubernetes ドキュメント を参考にまとめています. Kubernetes クラスタは, コンテナ化されたアプリケーションを実行するノードと呼ばれるワーカーマシンの集合です. ワーカーノードは, アプリケーションのコンポーネントである Pod…","html":"<p>個人で勉強するため, <a href=\"https://kubernetes.io/ja/docs/concepts/overview/components/\">Kubernetes ドキュメント</a> を参考にまとめています.</p>\n<p>Kubernetes クラスタは, コンテナ化されたアプリケーションを実行するノードと呼ばれるワーカーマシンの集合です.</p>\n<p>ワーカーノードは, アプリケーションのコンポーネントである Pod をホストします.</p>\n<p>マスターノードは, クラスタ内のワーカーノードと Pod を管理します.</p>\n<p>コントロールプレーンは, クラスタ内のワーカーノードと Pod を管理します.</p>\n<h2>コントロールプレーンコンポーネント</h2>\n<p>コントロールプレーンコンポーネントは, クラスタに関する全体的な決定（スケジューリングなど）を行います.</p>\n<p>コントロールプレーンコンポーネントは, クラスタ内のどのマシンでも実行できますが, シンプルにするため, セットアップスクリプトは通常, すべてのコントロールプレーンコンポーネントを同じマシンで起動し, そのマシンではユーザーコンテナを実行します.</p>\n<h3>kube-apiserver</h3>\n<p>API サーバーは, Kubernetes API を外部に提供する Kubernetes コントロールプレーンのコンポーネントです.\nAPI サーバーは Kubernetes コントロールプレーンのフロントエンドになります.</p>\n<p>Kubernetes API サーバーの主な実装は kube-apiserver です.\nkube-apiserver は水平方向にスケールするように設計されています.\n複数の kube-apiserver インスタンスを実行することで, インスタンス間でトラフィックを分散させることが可能です.</p>\n<h3>etcd</h3>\n<p>一貫性, 高可用性を持ったキーバリューストアで, Kubernetes のすべてのクラスタ情報の保存場所として利用されています.</p>\n<p>etcd を Kubernetes のデータストアとして使用する場合, 必ずデータの<a href=\"https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster\">バックアッププラン</a>を作成してください</p>\n<h3>kube-scheduler</h3>\n<p>コントロールプレーン上で動作するコンポーネントで, 新しく作られた Pod にノードが割り当てられているか監視し, 割り当てられていなかった場合にその Pod を実行するノードを選択します.</p>\n<p>スケジューリングの決定は, Pod あるいは Pod 群のりソール要求量, ハードウェア/ソフトウェア/ポリシーによる制約, アフィニティ及びアンチアフィニティの指定, データの局所性, ワークロード間の干渉, 有効期限などを考慮して行われます.</p>\n<h3>kube-controller-manager</h3>\n<p>コントロールプレーン上で動作するコンポーネントで, 複数のコントローラープロセスを実行しまう.</p>\n<p>論理的には, 各コントローラーは個別のプロセスですが, 複雑さを減らすために一つの実行ファイルにまとめてコンパイルされ, 探知角プロセスとして動きます.</p>\n<p>コントローラーには以下が含まれます.</p>\n<ul>\n<li>ノードコントローラー: ノードがダウンした場合の通知と対応を担当します.</li>\n<li>レプリケーションコントローラー: システム内の全レプリケーションコントローラーオブジェクトについて, Pod の数を正しく保つ枠割を持ちます.</li>\n<li>エンドポイントコントローラー: エンドポイントオブジェクトを注入します（つあり, Service と Pod を紐付けます）。</li>\n<li>サービスアカウントとトークンコントローラー: 新規の名前空間に対して, デフォルトアカウントと API アクセストークンを作成します.</li>\n</ul>\n<h2>ノードコンポーネント</h2>\n<p>ノードコンポーネントはすべてのノードで実行され, 稼働中の Pod の管理や Kubernetes の実行環境を提供します.</p>\n<h3>kubelet</h3>\n<p>クラスタ内の各ノードで実行されるエージェントです.\n各コンテナが Pod で実行されていることを保証します.</p>\n<p>Kubelet は, 様々なメカニズムを通じて提供される PodSpec のセットを取得し, それらの PodSpec に記述されているコンテナが正常に実行されている状態を保証します.kubelet は, Kubernetes が作成したものではないコンテナは管理しません.</p>\n<h3>kube-proxy</h3>\n<p>kube-proxy はクラスタ内の各 node で動作しているネットワークプロキシで, Kubernetes の Service コンセプトの一部を実装しています.</p>\n<p>kube-proxy は, Node のネットワークルールをメンテナンスします.\nこれらのネットワークルールにより, クラスタの内部または外部のネットワークセッションから Pod へのネットワーク通信が可能になります.</p>\n<p>kube-proxy は, オペレーティングシステムにパケットフィルタリング層があり, かつ使用可能な場合, パケットフィルタリング層を使用します.それ以外の場合は自身でトラフィックを転送します.</p>\n<h3>コンテナランタイム</h3>\n<p>コンテナランタイムは, コンテナの実行を担当するソフトウェアです.</p>\n<p>Kubernetes は次の複数のコンテナランタイムをサポートします.\nDocker, containerd, CRI-O, 及びすべての <a href=\"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md\">Kubernetes CRI</a> 実装です.</p>","frontmatter":{"title":"Kubernetes のコンポーネント","createdDate":"July 22, 2021","description":"Kubernetes のコンポーネントをまとめた記事です."}}},"pageContext":{"slug":"/blog/infra/kubernetes/components/"}},"staticQueryHashes":["1096143047","2841359383","3868140423"]}