{"componentChunkName":"component---src-templates-blog-post-template-tsx","path":"/blog/infra/kubernetes/how-to-create-cluster-logical-hardway/","result":{"data":{"site":{"siteMetadata":{"title":"Azuma Blog"}},"markdownRemark":{"id":"8ab46328-5258-5509-9472-c414918240a7","excerpt":"概要 おうち Kubernetes という記事を見て, Kubernetes の勉強がてらラズパイ買って構築してみようと思ったのが始まりです. 「先に動くものを作ってその後学ぶ」というのが自分の独学のやり方なので, ひとまず動くところまでを記事にしたいと思います. 初期設定 OS のインストール Ubuntu…","html":"<h2>概要</h2>\n<p><a href=\"https://github.com/CyberAgentHack/home-kubernetes-2020\">おうち Kubernetes</a> という記事を見て, Kubernetes の勉強がてらラズパイ買って構築してみようと思ったのが始まりです.</p>\n<p>「先に動くものを作ってその後学ぶ」というのが自分の独学のやり方なので, ひとまず動くところまでを記事にしたいと思います.</p>\n<h2>初期設定</h2>\n<h3>OS のインストール</h3>\n<h3>Ubuntu の起動</h3>\n<p>ディスプレイやキーボードを接続し, 起動します.\n初期状態だとユーザー名とパスワードが “ubuntu” になっているので, これを入力してログインできます.</p>\n<h3>Wifi の設定</h3>\n<p>下記の設定の設定ファイルを変更して, Wifi に接続し, パソコン経由で SSH できるように設定します.</p>\n<p>/etc/netplan/50-cloud-init.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># This file is generated from information provided by the datasource.  Changes\n# to it will not persist across an instance reboot.  To disable cloud-init's\n# network configuration capabilities, write a file\n# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:\n# network: {config: disabled}\nnetwork:\n    ethernets:\n        eth0:\n            dhcp4: true\n            optional: true\n    version: 2\n    wifis:\n        wlan0:\n            optional: true\n            dhcp4: true\n            access-points:\n                \"SSID\":\n                    password: \"PASSWORD\"</code></pre></div>\n<p>設定を有効にするには, 下記のコマンドを実行します.\nまた, ip コマンドを使って, IP アドレスを取得します.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Wifi 設定の有効化\n$ sudo netplan --debug try\n$ sudo netplan --debug generate\n$ sudo netplan --debug apply\n\n# 念の為, 再起動\n$ sudo reboot\n\n# IPアドレスを取得\n$ ip route show\ndefault via 192.168.3.1 dev wlan0 proto dhcp src 192.168.3.13 metric 600\n192.168.3.0/24 dev wlan0 proto kernel scope link src 192.168.3.13\n192.168.3.1 dev wlan0 proto dhcp scope link src 192.168.3.13 metric 600</code></pre></div>\n<p>wifi 経由で SSH するので, wlan0 の IP である <code class=\"language-text\">192.168.3.13</code> を使います.</p>\n<p>この上記の設定をラズパイの数だけ設定します.</p>\n<p>今回, 2 台のラズパイに設定し, <code class=\"language-text\">192.168.3.13</code> と <code class=\"language-text\">192.168.3.14</code> の IP を取得しました.</p>\n<h3>Ethernet の設定</h3>\n<p>2 台分のラズパイの hostname を設定します.\n以後, 1 台目を k8s1, 2 台目を k8s2 とします.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 1台目\n$ sudo hostnamectl set-hostname k8s1\n\n# 2台目\n$ sudo hostnamectl set-hostname k8s2</code></pre></div>\n<p>ifconfig コマンドを使用したいので, <code class=\"language-text\">net-tools</code> をインストールします.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># k8s1, k8s2\n$ sudo apt install net-tools\n$ ifconfig\neth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet6 fe80::dea6:32ff:feda:58df  prefixlen 64  scopeid 0x20&lt;link>\n        ether dc:a6:32:da:58:df  txqueuelen 1000  (Ethernet)\n        RX packets 2095108  bytes 203389811 (203.3 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 2112765  bytes 1145928435 (1.1 GB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host>\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 91493115  bytes 16514139253 (16.5 GB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 91493115  bytes 16514139253 (16.5 GB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nwlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.3.13  netmask 255.255.255.0  broadcast 192.168.3.255\n        inet6 fe80::dea6:32ff:feda:58e0  prefixlen 64  scopeid 0x20&lt;link>\n        inet6 2400:2410:2f61:2100:dea6:32ff:feda:58e0  prefixlen 64  scopeid 0x0&lt;global>\n        ether dc:a6:32:da:58:e0  txqueuelen 1000  (Ethernet)\n        RX packets 281309  bytes 370271836 (370.2 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 101144  bytes 11409916 (11.4 MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre></div>\n<p>Ethernet の IPv4 を設定します.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># k8s1\n$ sudo ifconfig eth0 10.0.0.11 netmask 255.255.255.0 broadcast 10.0.0.255\n\n# k8s2\n$ sudo ifconfig eth0 10.0.0.12 netmask 255.255.255.0 broadcast 10.0.0.255</code></pre></div>\n<p>IP の確認をします.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># k8s1\n$ ifconfig\neth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 10.0.0.11  netmask 255.255.255.0  broadcast 10.0.0.255\n        inet6 fe80::dea6:32ff:feda:58df  prefixlen 64  scopeid 0x20&lt;link>\n        ether dc:a6:32:da:58:df  txqueuelen 1000  (Ethernet)\n        RX packets 2096222  bytes 203499109 (203.4 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 2113989  bytes 1146636258 (1.1 GB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host>\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 91548925  bytes 16524361644 (16.5 GB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 91548925  bytes 16524361644 (16.5 GB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nwlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.3.13  netmask 255.255.255.0  broadcast 192.168.3.255\n        inet6 fe80::dea6:32ff:feda:58e0  prefixlen 64  scopeid 0x20&lt;link>\n        inet6 2400:2410:2f61:2100:dea6:32ff:feda:58e0  prefixlen 64  scopeid 0x0&lt;global>\n        ether dc:a6:32:da:58:e0  txqueuelen 1000  (Ethernet)\n        RX packets 281387  bytes 370277328 (370.2 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 101206  bytes 11421184 (11.4 MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre></div>\n<p><code class=\"language-text\">/etc/hosts</code> の設定をして, ラズパイ同士で名前解決ができるようにします.</p>\n<p>/etc/hosts</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">127.0.0.1 localhost\n\n# The following lines are desirable for IPv6 capable hosts\n::1 ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nff02::3 ip6-allhosts\n10.0.0.11 k8s1\n10.0.0.12 k8s2</code></pre></div>\n<h3>Kubernetes クラスタの構築</h3>\n<p>ここからは, <a href=\"https://github.com/CyberAgentHack/home-kubernetes-2020\">おうち Kubernetes</a> の <a href=\"https://github.com/CyberAgentHack/home-kubernetes-2020/tree/master/how-to-create-cluster-logical-hardway#%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E7%94%9F%E6%88%90\">証明書の生成</a> 以降の手順と同じなので, その手順を行うことで, nginx の Welcome 画面が見れるようになりました.</p>\n<h3>Kubernetes 構築に関してのわからなかった単語</h3>\n<p>Kubernetes を構築した際に, わからない部分が多くあったので, そちらを羅列して, 別記事にてまとめてみようと思います.</p>\n<ul>\n<li>Kubernetes のコンポーネント\n<ul>\n<li>etcd</li>\n<li>api server</li>\n<li>controller manager</li>\n<li>scheduler</li>\n<li>proxy</li>\n<li>NodePort</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ラズパイで Kubernetes を構築","createdDate":"July 10, 2021","description":"ラズパイで Kubernetes クラスタを構築した際の手順です."}}},"pageContext":{"slug":"/blog/infra/kubernetes/how-to-create-cluster-logical-hardway/"}},"staticQueryHashes":["1096143047","2841359383","3868140423"]}