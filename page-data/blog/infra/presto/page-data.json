{"componentChunkName":"component---src-templates-blog-post-template-tsx","path":"/blog/infra/presto/","result":{"data":{"site":{"siteMetadata":{"title":"Azuma Blog"}},"markdownRemark":{"id":"2137bb0e-905b-57fa-b3c6-e34a264db593","excerpt":"概要 Presto とは, Facebook が公開した新しい分散処理基盤.\n大規模なデータセットに対して, インタラクティブに結果を返すように開発されたものである.\nPrestoはHiveやImpalaと同じ「SQL Query Engine」であり, 特に数百GB…","html":"<h2>概要</h2>\n<p>Presto とは, Facebook が公開した新しい分散処理基盤.\n大規模なデータセットに対して, インタラクティブに結果を返すように開発されたものである.\nPrestoはHiveやImpalaと同じ「SQL Query Engine」であり, 特に数百GBを超える大規模データに対してもインタラクティブなレスポンスを（コンマ0秒以下，遅くても2,3秒）返す.\n<a href=\"https://tug.red/entry/2014/07/10/150250/\">参考:『Prestoとは何か，Prestoで何ができるか』</a></p>\n<p>現在, 使用されている Presto としては,\n<a href=\"https://prestodb.io/\">PrestoDB</a> と <a href=\"https://trino.io/\">Trino(旧PrestoSQL)</a> がある.\nPrestoDB は 2012 年に Facebook で作成されていて, Trino は 2018 年に オープンソースコミュニティとして作成されたものである.</p>\n<p>この記事は, Trino に関しての記事となっています.</p>\n<h2>Trino</h2>\n<p>分散クエリを使用して, 大量のデータに効率的に取得するために設計されたツールです.\n従来のリレーショナルデータベースや Cassandra など, さまざまな種類のデータソースで動作するように拡張できます.\nまた, 数種類のデータソース間でのデータ結合(JOIN)なども行うことができます.</p>\n<h2>DEMO</h2>\n<p>MySQL と PostgreSQL の2つのデータソースを使って, 動作確認をしてみます.\n今回は, DEMO 用にリポジトリ <a href=\"https://github.com/azuma317/trino-sample\">trino-sample</a> を作りました.\n動作確認に関して, trino から Docker イメージが提供されているのでそちらを使用します.\n<a href=\"https://hub.docker.com/r/trinodb/trino\">dockerhub - trino</a></p>\n<h3>Trino の設定</h3>\n<h4>データソース</h4>\n<p>データソースの設定については, <code class=\"language-text\">/etc/trino/catalog/</code> 配下にデータソースごとの接続情報を記述します.</p>\n<p>設定例</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\"><pre class=\"language-properties\"><code class=\"language-properties\"><span class=\"token comment\"># MySQL</span>\n<span class=\"token attr-name\">connector.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">mysql</span>\n<span class=\"token attr-name\">connection-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://mysql:3306?autoReconnect=true&amp;useSSL=false</span>\n<span class=\"token attr-name\">connection-user</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">root</span>\n<span class=\"token attr-name\">connection-password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">password</span>\n\n<span class=\"token comment\"># PostgreSQL</span>\n<span class=\"token attr-name\">connector.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">postgresql</span>\n<span class=\"token attr-name\">connection-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:postgresql://postgresql:5432/mydb</span>\n<span class=\"token attr-name\">connection-user</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">postgres</span>\n<span class=\"token attr-name\">connection-password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">password</span></code></pre></div>\n<h4>Config</h4>\n<p><code class=\"language-text\">config.properties</code> で coordinator や worker の設定, ポートの設定等を行います.\n検証等で, coordinator かつ worker として扱いたい場合は,\n<code class=\"language-text\">node-scheduler.include-coordinator=true</code> の設定を付ける必要があります.</p>\n<h4>クラスタ</h4>\n<p>基本的に Presto は, coordinator, worker のクラスタで動作します.\n<code class=\"language-text\">node.properties</code> でクラスタID: <code class=\"language-text\">node.environment</code> であったり,\nノードID: <code class=\"language-text\">node.id</code> であったりを設定します.</p>\n<h3>動作確認</h3>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">$ git clone git@github.com:azuma317/trino-sample.git\n$ docker compose up -d\n# mysql をデフォルトで接続したい場合\n$ ./bin/trino --server localhost:8080 --catalog mysql --schema mydb\n# postgresql をデフォルトで接続したい場合\n$ ./bin/trino --server localhost:8080 --catalog postgresql --schema public\n\n# mysql へのクエリの投げ方\ntrino:mydb&gt; select * from mysql.mydb.users;\n id |        name\n----+---------------------\n  1 | Gary Singh Johnson\n  2 | Nguyen Joseph Gupta\n  3 | Raul Bryan Ruiz\n  4 | Earl Craig Caldwell\n  5 | Wes Sean Parks\n(5 rows)\n\nQuery 20210505_055704_00011_6tmbi, FINISHED, 1 node\nSplits: 17 total, 17 done (100.00%)\n0.22 [5 rows, 0B] [22 rows/s, 0B/s]\n\n# postgresql へのクエリの投げ方\ntrino:mydb&gt; select * from postgresql.public.users;\n user_id |       user_name\n---------+-----------------------\n       1 | Danilo Hoang Bhandari\n       2 | Jacques Ace Faulkner\n       3 | Dipak Bubba Hopper\n       4 | Mihir Aji Ace\n       5 | Kabir Bayu Humphries\n(5 rows)\n\nQuery 20210505_060105_00012_6tmbi, FINISHED, 1 node\nSplits: 17 total, 17 done (100.00%)\n0.22 [5 rows, 0B] [22 rows/s, 0B/s]\n\n# mysql, postgresql へのクエリの投げ方\ntrino:mydb&gt; select id, name from mysql.mydb.users\n         -&gt; union\n         -&gt; select user_id as id, user_name as name from postgresql.public.users\n         -&gt; order by id;\n id |         name\n----+-----------------------\n  1 | Danilo Hoang Bhandari\n  1 | Gary Singh Johnson\n  2 | Nguyen Joseph Gupta\n  2 | Jacques Ace Faulkner\n  3 | Dipak Bubba Hopper\n  3 | Raul Bryan Ruiz\n  4 | Earl Craig Caldwell\n  4 | Mihir Aji Ace\n  5 | Wes Sean Parks\n  5 | Kabir Bayu Humphries\n(10 rows)\n\nQuery 20210505_060327_00018_6tmbi, FINISHED, 1 node\nSplits: 68 total, 68 done (100.00%)\n0.22 [10 rows, 0B] [45 rows/s, 0B/s]</code></pre></div>","frontmatter":{"title":"Presto(TrinoDB)をDockerで動かしてみた","date":"May 01, 2021","description":"TrinoDBの設定や動作確認を行いました。"}}},"pageContext":{"slug":"/blog/infra/presto/"}},"staticQueryHashes":["1096143047","2841359383","3868140423"]}